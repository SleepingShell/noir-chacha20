use dep::std;

mod block;

/// Encrypts an arbitrary sized message by running chacha20.
/// The stream cipher of ChaCha20 is composed of running the block_function with an increasing counter,
/// which provides 64-bytes of keystream at a time.
fn ChaCha20<N>(key: [u32; 8], nonce: [u32; 3], counter: u32, plaintext: [u8; N]) -> [u8; N] {
    let mut res = [0; N];
    for j in 0..(N as u32/64) {
        let key_stream = block::chacha20_block(key, nonce, counter+j as u32);
        for t in 0..64 {
            res[64*j + t] = plaintext[64*j + t] ^ key_stream[t];
        }
    }

    if (N as u32 % 64 != 0) {
        let j = (N as u32 / 64) as Field;
        let key_stream = block::chacha20_block(key, nonce, counter+j as u32);
        for t in 0..((N as u32 % 64) as Field) {
            res[64*j + t] = plaintext[64 * j + t] ^ key_stream[t];
        }
    }

    res
}

// The test data of this function is from section 2.4.2 of RFC7539
#[test]
fn test_ChaCha20() {
    let mut key = [0 as u32; 8];
    for i in 0..8 {
        key[i] = (4*i | (4*i + 1) << 8 | (4*i + 2) << 16 | (4*i + 3) << 24);
    }

    let mut nonce = [0; 3];
    nonce[1] = 0x4a000000;

    let counter = 1;

    let plaintext = [
        0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c,
        0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73,
        0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63,
        0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f,
        0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20,
        0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73,
        0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69,
        0x74, 0x2e
    ];

    let ciphertext = ChaCha20(key, nonce, counter, plaintext);

    let expected_ciphertext = [
        0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80, 0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69, 0x81,
        0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2, 0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f, 0xae, 0x0b,
        0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab, 0x8f, 0x59, 0x3d, 0xab, 0xcd, 0x62, 0xb3, 0x57,
        0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab, 0x8f, 0x53, 0x0c, 0x35, 0x9f, 0x08, 0x61, 0xd8,
        0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61, 0x56, 0xa3, 0x8e, 0x08, 0x8a, 0x22, 0xb6, 0x5e,
        0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06, 0x81, 0x8c, 0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36,
        0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6, 0xb4, 0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42,
        0x87, 0x4d
    ];

    let decrypted_plaintext = ChaCha20(key, nonce, counter, ciphertext);

    for i in 0..plaintext.len() {
        assert(ciphertext[i] == expected_ciphertext[i]);
    }

    for i in 0..plaintext.len() {
        assert(decrypted_plaintext[i] == plaintext[i]);
    }
}